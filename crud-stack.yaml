AWSTemplateFormatVersion: 2010-09-09

Description: Stack to create a launch configuration for CRUD EC2 servers.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Database Parameters
      Parameters:
        - DatabaseName
        - DatabaseHostName
        - DatabaseUsername
        - DatabasePassword
    - Label:
        default: Other Parameters
      Parameters:
        - EC2ServerInstanceType
    ParameterLabels:
      DatabaseName:
        default: DB name
      DatabaseHostName:
        default: Database endpoint
      DatabaseUsername:
        default: Database User Name
      DatabasePassword:
        default: Database Password
      EC2ServerInstanceType:
        default: Instance Type

Parameters:

  LatestAL2AmiId: # Locate latest Amazon Linux 2 AMI from public parameter store
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  DatabaseName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS database name.
    Type: String
    Default: PhpMysqlCrud

  DatabaseHostName:
    Description: Amazon RDS DB Endpoint
    Type: String

  DatabaseUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS username.
    ConstraintDescription: Must contain only alphanumeric characters (minimum 4; maximum 16).
    MaxLength: 16
    MinLength: 4
    Type: String
    Default: root

  DatabasePassword:
    Description: The Amazon RDS password.
    MaxLength: 41
    MinLength: 6
    NoEcho: true
    Type: String

  EC2ServerInstanceType:
    Description: Amazon EC2 Instance Type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      
  ALBDnsName:
    Description: Application Load Balancer DNS.
    Type: String

  CRUDElasticFileSystemID:
    Description: Elastic File System ID.
    Type: String

Resources:

  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web instances
      GroupName: CRUD Servers Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !ImportValue AppInstanceSecurityGroupID
      VpcId:
        !ImportValue VPCID

  EFSSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref WebTierSecurityGroup
      GroupId: !ImportValue EFSMountTargetSecurityGroupID

  RDSSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref WebTierSecurityGroup
      GroupId: !ImportValue RDSSecurityGroupID
# AWS Task Launch Template

  AWSTaskLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: AWSTaskLaunchTemplate
      LaunchTemplateData:
        KeyName: j2      
        UserData:
          "Fn::Base64":
            !Sub
            - |
              #!/bin/bash -xe
              
              # DB & ALB variables
              DB_NAME=${DatabaseName}
              DB_HOSTNAME=${DatabaseHostName}
              DB_USERNAME="${DatabaseUsername}"
              DB_PASSWORD="${DatabasePassword}"
              LB_HOSTNAME=${ALBDNSName}
              
              # Get EC2 instance ID and private IP with a token
              TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
              INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
              PRIVATE_IP=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)

              # Redirect all output to a log file
              exec > >(tee -a /var/log/userdata.log) 2>&1
              
              # Log the script start time
              echo "Script started: $(date)"
              
              yum update -y
              yum install -y amazon-linux-extras
              yum install -y awslogs httpd mysql gcc-c++
              amazon-linux-extras enable php7.4
              yum clean metadata
              yum install -y php php-{pear,cgi,common,curl,mbstring,gd,mysqlnd,gettext,bcmath,json,xml,fpm,intl,zip,imap,devel,opcache}
              systemctl enable nfs-server.service
              systemctl start nfs-server.service
              mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/html

              # Install CRUD
              curl -L -o /tmp/crud.zip https://github.com/FaztWeb/php-mysql-crud/archive/master.zip
              unzip /tmp/crud.zip -d /tmp/
              cp -rv /tmp/php-mysql-crud-master/* /var/www/html/
              rm -rf /tmp/crud.zip /tmp/php-mysql-crud-master
              cd /var/www/html/
              # Modify the SQL script
              sed -i 's/php_mysql_crud/'"$DB_NAME"'/' database/script.sql
              sed -i 's/CREATE DATABASE/CREATE DATABASE IF NOT EXISTS/' database/script.sql
              sed -i 's/CREATE TABLE/CREATE TABLE IF NOT EXISTS/' database/script.sql              
              # Execute the SQL script with dynamic variables
              mysql -h "$DB_HOSTNAME" -u "$DB_USERNAME" -p"$DB_PASSWORD" -e "source /var/www/html/database/script.sql"

              # Modify PHP files
              sed -i 's/php_mysql_crud/'"$DB_NAME"'/' db.php
              sed -i 's/root/'"$DB_USERNAME"'/' db.php
              sed -i 's/password123/'"$DB_PASSWORD"'/' db.php
              sed -i 's/localhost/'"$DB_HOSTNAME"'/' db.php
              sed -i 's/erro/error/' db.php
              
              # Update title in header.php
              sed -i "s/PHP MySQL CRUD/PHP MySQL CRUD ID\/IP: $INSTANCE_ID | $PRIVATE_IP/" includes/header.php
              
              chkconfig httpd on
              service httpd start

              # Log the script end time
              echo "Script completed: $(date)"
            - ElasticFileSystem: !Ref CRUDElasticFileSystemID
              ALBDNSName: !Ref ALBDnsName
        ImageId: !Ref LatestAL2AmiId
        SecurityGroupIds:
          - !Ref WebTierSecurityGroup
        InstanceType: !Ref EC2ServerInstanceType

Outputs:
  CRUDZLaunchTemplate:
    Description: 'Launch Template for CRUD'
    Value:
      !Ref AWSTaskLaunchTemplate